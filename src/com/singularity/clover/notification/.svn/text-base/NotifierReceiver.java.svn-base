package com.singularity.clover.notification;

import android.app.Notification;
import android.app.NotificationManager;
import android.app.PendingIntent;
import android.content.BroadcastReceiver;
import android.content.Context;
import android.content.Intent;
import android.os.Handler;
import android.os.Message;

import com.singularity.clover.R;
import com.singularity.clover.Global;
import com.singularity.clover.SingularityApplication;
import com.singularity.clover.entity.EntityPool;
import com.singularity.clover.entity.task.Task;

public class NotifierReceiver extends BroadcastReceiver {

	public static final String IN_NOTIFIY_TASK_ID = 
		"com.singularity.notification.NotifierReceiver.task.id";
	private static final long VIBRATION_DURATION = 60 * 1000;
	private static int notificationId = 1;
	private static final int CANCEL_VIBRATION = 2;
	private static final long[] vibratePattern = new long[60];

	static {
		for (int i = 0; i < 60; i++) {
			vibratePattern[i] = 5000;
		}
	}

	private static int nextNotificationId() {
		return notificationId++;
	}
	
	public class AutoCancelHandler extends Handler {
		private Context mContext;

		public AutoCancelHandler(Context context) {
			mContext = context;
		}

		@Override
		public void handleMessage(Message msg) {
			Intent intent = new Intent(mContext, NotifierService.class);
			intent.setAction(NotifierService.STOP_NOTIFY);
			mContext.startService(intent);
		}
	}

	@Override
	public void onReceive(Context context, Intent intent) {
		String action = intent.getAction();
		if (action.equals(NotifierBinder.ACTION_ALARM_RING)) {
			long showId = intent.getLongExtra(IN_NOTIFIY_TASK_ID,
					Global.INVALIDATE_ID);
			Task task = (Task) EntityPool.instance().forId(showId, Task.TAG);
			
			NotificationManager notificationManager =
				(NotificationManager) SingularityApplication.instance().
				 getApplicationContext().getSystemService(Context.NOTIFICATION_SERVICE);

			int icon = R.drawable.ic_notification;
			CharSequence tickerText = "Coming to do";
			long when = System.currentTimeMillis();

			// build notification
			Notification notification = new Notification(icon, tickerText, when);
			notification.flags |= Notification.FLAG_AUTO_CANCEL;
			
			CharSequence contentTitle;
			CharSequence contentText;
			if(task != null){
				if(task.name != null){
					if(task.name.equals("")){
						contentTitle = "Recent task";
					}else{
						contentTitle = task.name;
					}
				}else{
					contentTitle = "Recent task";
				}
				contentText = "Hello description";
			}else{
				contentTitle = "Recent work";
				contentText = "Now to do";
			}
			
			Intent notificationIntent = new Intent(context,	NotifierService.class);
			notificationIntent.setAction(NotifierService.STOP_NOTIFY_AND_SWITCH);
			notificationIntent.putExtra(NotifierService.IN_NOTIFIY_TASK_ID, showId);
			PendingIntent contentIntent = PendingIntent.getService(context, 0,
					notificationIntent, PendingIntent.FLAG_ONE_SHOT);
			
			notification.setLatestEventInfo(context, contentTitle, contentText,
					contentIntent);
			notificationManager.notify(nextNotificationId(), notification);

			// start sound and vibration
			Intent serviceIntent = new Intent(context, NotifierService.class);
			serviceIntent.setAction(NotifierService.START_NOTIFY);
			context.startService(serviceIntent);
			
			// stop sound and vibration after 1 min
			AutoCancelHandler handler = new AutoCancelHandler(context);
			handler.sendEmptyMessageDelayed(CANCEL_VIBRATION,
					VIBRATION_DURATION);
			
			SingularityApplication.instance().getNotifierBinder().bindNotifer();
		} else if (action.equals(NotifierBinder.ACTION_REFRESH_ALL)) {
			//sychronize date
		}
	}

}
