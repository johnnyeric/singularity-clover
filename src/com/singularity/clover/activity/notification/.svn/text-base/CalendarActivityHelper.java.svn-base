package com.singularity.clover.activity.notification;

import java.util.ArrayList;
import java.util.Iterator;

import android.content.Intent;
import android.os.Handler;
import android.text.format.DateUtils;
import android.text.format.Time;
import android.view.View;
import android.view.View.OnClickListener;
import android.view.ViewStub;
import android.widget.Button;
import android.widget.RelativeLayout;
import android.widget.Toast;

import com.singularity.clover.R;
import com.singularity.clover.Global;
import com.singularity.clover.SingularityApplication;
import com.singularity.clover.activity.entity.TaskViewActivity;
import com.singularity.clover.entity.EntityPool;
import com.singularity.clover.entity.notification.Notifier;
import com.singularity.clover.entity.task.Task;

public class CalendarActivityHelper {
	protected CalendarActivity mActivity;
	protected Button mPeriodicMonth,mPeriodicWeek;
	protected View mTaskAttrLayout = null;
	protected Button mPeriodic,mTaskDate,mDeadline,mNotification,mConfirm,mNext;
	
	protected CalendarActivityHelper(CalendarActivity activity){
		mActivity = activity;
	}	
	
	protected Task wizardMode(Task task) {
		
		mPeriodicMonth = (Button) mActivity.findViewById(
				R.id.calendar_periodic_month);
		mPeriodicWeek = (Button) mActivity.findViewById(
				R.id.calendar_periodic_week);
		
		if(mTaskAttrLayout == null){
			mTaskAttrLayout = ((ViewStub)mActivity.findViewById(
					R.id.calendar_task_attribute_set_layout_stub)).inflate();
		
			mPeriodic = (Button) mActivity.findViewById(
					R.id.calendar_task_attribute_periodic);
			mTaskDate = (Button) mActivity.findViewById(
					R.id.calendar_task_attribute_task_date);
			mDeadline = (Button) mActivity.findViewById(
					R.id.calendar_task_attribute_deadline);
			mNotification = (Button) mActivity.findViewById(
					R.id.calendar_task_attribute_notifier);
			mConfirm = (Button) mActivity.findViewById(
					R.id.calendar_task_attribute_confirm);
			mNext = (Button) mActivity.findViewById(
					R.id.calendar_task_next);
			mPeriodicMonth.setOnClickListener(new OnBtnPeriodicMonth());
			mPeriodicWeek.setOnClickListener(new OnBtnPeriodicWeek());
			mPeriodic.setOnClickListener(new OnBtnPeriodic());
			mTaskDate.setOnClickListener(new OnBtnTaskDate());
			mDeadline.setOnClickListener(new OnBtnDeadline());
			mNotification.setOnClickListener(new OnBtnNotification());
			mConfirm.setOnClickListener(new OnBtnConfirm());
			mNext.setOnClickListener(new OnBtnNext());
			
			
		}else{
		
		}
		
		String dateBtn = mActivity.getResources().getString(
				R.string.date_button);
		String deadlineBtn = mActivity.getResources().getString(
				R.string.deadline_button);
		String periodicBtn = mActivity.getResources().getString(
				R.string.periodic_button);
		String alarmBtn = mActivity.getResources().getString(
				R.string.alarm_button);
		
		String date;
		if (task.getStartDate() != Global.INVALIDATE_DATE) {
			date = DateUtils.formatDateTime(null, task.getStartDate(),
					DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_MONTH
							| DateUtils.FORMAT_SHOW_YEAR);
			mTaskDate.setText(date);
			mPeriodic.setEnabled(true);
		} else {
			mTaskDate.setText(dateBtn);
			mPeriodic.setEnabled(false);
		}

		String deadline;
		if (task.getEndDate() != Global.INVALIDATE_DATE) {
			deadline = DateUtils.formatDateTime(null, task.getEndDate(),
					DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_MONTH
							| DateUtils.FORMAT_SHOW_YEAR);
			mDeadline.setText(deadline);
		} else {
			mDeadline.setText(deadlineBtn);
		}

		long nextNotifier = task.notification.getNextNotifier();
		if (nextNotifier != Global.INVALIDATE_DATE) {
			String next = DateUtils.formatDateTime(mActivity, nextNotifier,
					DateUtils.FORMAT_SHOW_DATE | DateUtils.FORMAT_ABBREV_MONTH
							| DateUtils.FORMAT_SHOW_TIME);
			mNotification.setText(next);
		} else {
			mNotification.setText(alarmBtn);
		}
		
		if(task.getPeriodic() != Task.TASK_NOT_PERIODIC){
			if(task.getPeriodic() == 30){
				String hint = mActivity.getResources(
					).getString(R.string.toast_calendar_periodic_month_hint);
				mPeriodic.setText(hint);
			}else if(task.getPeriodic() == 7){
				String hint = mActivity.getResources(
					).getString(R.string.toast_calendar_periodic_week_hint);
				mPeriodic.setText(hint);
			}else{
				String prefix = mActivity.getResources(
					).getString(R.string.toast_calendar_periodic_prefix);
				String suffix = mActivity.getResources(
						).getString(R.string.toast_calendar_periodic_suffix);
				mPeriodic.setText(prefix + task.getPeriodic() + suffix);
			}
		}else{
			mPeriodic.setText(periodicBtn);}
			
		mTaskAttrLayout.setVisibility(View.VISIBLE);
		mActivity.mCalendarCanvas = (CalendarCanvas)mActivity.
			findViewById(R.id.calendar_canvas);
		mActivity.mCalendarCanvas.setVisibility(View.GONE);
		return task;
	}
	
	protected void overviewMode(){
		if(mTaskAttrLayout != null)
			mTaskAttrLayout.setVisibility(View.GONE);
		
		if(mActivity.mCalendarCanvas == null){
			mActivity.mCalendarCanvas = (CalendarCanvas)mActivity.
				findViewById(R.id.calendar_canvas);
		}else{
		}
		mActivity.mCalendarCanvas.setVisibility(View.VISIBLE);
		
		Handler handler = new Handler();
		handler.postDelayed(new OverviewModeRunnable(), 1000);
	}
	
	protected ArrayList<Long> queryByMonth(){
		Time it = new Time();
		it.set(0, 0, 0, 1, mActivity.mMonth, mActivity.mYear);
		long start = it.toMillis(false);
		
		int nextMonth = mActivity.mMonth +1;
		nextMonth = nextMonth >11?0:nextMonth;
		it.set(59,59,23,1,nextMonth,mActivity.mYear);
		long end = it.toMillis(false);
		
		String[] wheres = new String[]{Long.toString(start),Long.toString(end),
				Long.toString(start),Long.toString(end),Long.toString(start),Long.toString(end),
				Long.toString(Global.INVALIDATE_DATE)};
		ArrayList<Long> ids = EntityPool.instance().getPrototype(Task.TAG).loadTable(
				" WHERE (start_date BETWEEN ? AND ?) OR (end_date BETWEEN ? AND ?) OR (start_date < ? AND end_date > ? AND start_date <> ?) " +
				"ORDER BY start_date ASC ", wheres);
		return ids;	
	}
	
	protected class OnBtnTaskDate implements OnClickListener{

		@Override
		public void onClick(View v) {
			mActivity.mState = CalendarActivity.STATE_MARK_DATE;
			mTaskAttrLayout.setVisibility(View.GONE);
			mConfirm.setVisibility(View.VISIBLE);
		}
	}
	
	protected class OnBtnDeadline implements OnClickListener{

		@Override
		public void onClick(View v) {
			mActivity.mState = CalendarActivity.STATE_MARK_DEADLINE;
			mTaskAttrLayout.setVisibility(View.GONE);		
			mConfirm.setVisibility(View.VISIBLE);
		}
	}
	
	protected class OnBtnPeriodic implements OnClickListener{

		@Override
		public void onClick(View v) {
			mPeriodicMonth.setVisibility(View.VISIBLE);
			mPeriodicWeek.setVisibility(View.VISIBLE);
			mActivity.mState = CalendarActivity.STATE_MARK_PERIODIC;
			mTaskAttrLayout.setVisibility(View.GONE);	
			mConfirm.setVisibility(View.VISIBLE);
		}	
	}
	
	protected class OnBtnNotification implements OnClickListener{

		@Override
		public void onClick(View v) {
			mActivity.mState = CalendarActivity.STATE_MARK_NOTIFICAION;
			mTaskAttrLayout.setVisibility(View.GONE);	
			RelativeLayout.LayoutParams lp = 
				(RelativeLayout.LayoutParams) mActivity.mCalendar.getLayoutParams();
			lp.setMargins(0, 0, 0, CalendarActivity.INDICATOR_ZONE);
			RelativeLayout.LayoutParams lp2 = 
				(RelativeLayout.LayoutParams) mActivity.mDate.getLayoutParams();
			lp2.setMargins(CalendarActivity.INDICATOR_ZONE,
				CalendarActivity.INDICATOR_ZONE, CalendarActivity.INDICATOR_ZONE, 0);
			
			mConfirm.setVisibility(View.VISIBLE);
			Notifier.setActivity(mActivity);
			mActivity.mFrame.setDrawingWatch(true);
			mActivity.mMonthDay = Global.INVALIDATE_MONTH_DAY;
			//mActivity.notifyCalendarChanged();
			//mActivity.mCalendar.requestLayout();
		}
		
	}
	
	protected class OnBtnPeriodicMonth implements OnClickListener{

		@Override
		public void onClick(View v) {
			mActivity.mTask.setPeriodic(30);
			String hint = mActivity.getResources().getString(
					R.string.toast_calendar_periodic_month_hint);
			mPeriodic.setText(hint);
			Toast toast = Toast.makeText(mActivity, 
							hint, Toast.LENGTH_SHORT);
			toast.show();
			mActivity.notifyCalendarInvalidated();
		}	
	}
	
	protected class OnBtnPeriodicWeek implements OnClickListener{

		@Override
		public void onClick(View v) {
			mActivity.mTask.setPeriodic(7);
			String hint = mActivity.getResources().getString(
					R.string.toast_calendar_periodic_week_hint);
			mPeriodic.setText(hint);
			Toast toast = Toast.makeText(mActivity, 
							hint, Toast.LENGTH_SHORT);
			toast.show();
			mActivity.notifyCalendarInvalidated();
		}	
	}
	
	protected class OnBtnConfirm implements OnClickListener{

		@Override
		public void onClick(View v) {
			
			switch(mActivity.mState){
			case CalendarActivity.STATE_MARK_DATE:
				onMarkTaskDateDone();
				mActivity.mTask.store();
				break;
			case CalendarActivity.STATE_MARK_DEADLINE:
				onMarkDeadlineDone();
				mActivity.mTask.store();
				break;
			case CalendarActivity.STATE_MARK_NOTIFICAION:
				onMarkNotificationDone();
				break;
			case CalendarActivity.STATE_MARK_PERIODIC:
				onMarkPeriodicDone();
				mActivity.mTask.store();
				break;
				
			}
			v.setVisibility(View.GONE);
			mActivity.mMonthDay = Global.INVALIDATE_MONTH_DAY;
		}
		
	}
	
	protected class OnBtnNext implements OnClickListener{

		@Override
		public void onClick(View v) {
			Intent intent = new Intent(
					mActivity, TaskViewActivity.class);
			intent.setAction(TaskViewActivity.TASK_NEW);
			intent.putExtra(TaskViewActivity.IN_TASK_ID,mActivity.mTask.getId());
			mActivity.startActivity(intent);
			mActivity.setIntent(null);
		}
		
	}
	
	protected void onMarkPeriodic(long taskDate,long clickDate){
		long a = Time.getJulianDay(taskDate, 0);
		long b = Time.getJulianDay(clickDate, 0);
		
		int offset = (int) (b-a);
		if(offset<0){
			mActivity.mTask.setPeriodic(-offset);}
	}
	
	protected void onMarkTaskDateDone(){
		mActivity.mState = CalendarActivity.STATE_MARK_IDLE;
		mTaskAttrLayout.setVisibility(View.VISIBLE);
		String date;
		if(mActivity.mTask.getStartDate() != Global.INVALIDATE_DATE){
			date = DateUtils.formatDateTime(
					null, mActivity.mTask.getStartDate(), DateUtils.FORMAT_SHOW_DATE
					| DateUtils.FORMAT_ABBREV_MONTH | DateUtils.FORMAT_SHOW_YEAR);
			mTaskDate.setText(date);
			mPeriodic.setEnabled(true);
		}else{
			date =" - ";
		}
			
			
	}
	
	protected void onMarkDeadlineDone(){
		mActivity.mState = CalendarActivity.STATE_MARK_IDLE;
		mTaskAttrLayout.setVisibility(View.VISIBLE);
		String deadline;
		if(mActivity.mTask.getEndDate() != Global.INVALIDATE_DATE){
			deadline = DateUtils.formatDateTime(
					null, mActivity.mTask.getEndDate(), DateUtils.FORMAT_SHOW_DATE
					| DateUtils.FORMAT_ABBREV_MONTH | DateUtils.FORMAT_SHOW_YEAR);
			mDeadline.setText(deadline);
		}else{
			deadline=" - ";
		}
	}
	
	protected void onMarkPeriodicDone(){
		mPeriodicMonth.setVisibility(View.GONE);
		mPeriodicWeek.setVisibility(View.GONE);
		mActivity.mState = CalendarActivity.STATE_MARK_IDLE;
		mTaskAttrLayout.setVisibility(View.VISIBLE);	
	}
	
	protected void onMarkNotificationDone(){
		mActivity.mState = CalendarActivity.STATE_MARK_IDLE;
		mTaskAttrLayout.setVisibility(View.VISIBLE);	
		RelativeLayout.LayoutParams lp = 
			(RelativeLayout.LayoutParams) mActivity.mCalendar.getLayoutParams();
		lp.setMargins(0, 0, 0, 0);
		RelativeLayout.LayoutParams lp2 = 
			(RelativeLayout.LayoutParams) mActivity.mDate.getLayoutParams();
		lp2.setMargins(0,0, 0, 0);
		
		Notifier.removeActivity();
		mActivity.mFrame.setDrawingWatch(false);
		long nextNotifier = mActivity.mTask.notification.getNextNotifier();
		if(nextNotifier != Global.INVALIDATE_DATE){
			String next = DateUtils.formatDateTime(
					mActivity, nextNotifier, DateUtils.FORMAT_SHOW_DATE
					| DateUtils.FORMAT_ABBREV_MONTH | DateUtils.FORMAT_SHOW_TIME);
			mNotification.setText(next);
		}
		
		Iterator<View> views = mActivity.notifierIndicators.iterator();
		while(views.hasNext() ){
			views.next().setVisibility(View.GONE);
		}
		
		SingularityApplication.instance().getNotifierBinder().bindNotifer();
	}
	
	protected class OverviewModeRunnable implements Runnable{

		@Override
		public void run() {
			View view = mActivity.mCalendar.getChildAt(0);
			if(view == null){
				Handler handler = new Handler();
				handler.postDelayed(new OverviewModeRunnable(), 500);
				return;
			}
			mActivity.mItemStartX = view.getLeft();
			mActivity.mItemStartY = view.getTop();
			mActivity.mItemHeight = view.getHeight();
			mActivity.mItemWidth = view.getWidth();
			
			mActivity.mCalendarCanvas.setParams(mActivity.mItemStartX, 
					mActivity.mItemStartY, mActivity.mItemWidth,mActivity.mItemHeight,
					mActivity.mFirstDayWeek,mActivity.mLastDate,
					mActivity.mMonth,mActivity.mYear);
			mActivity.mCalendarCanvas.setTaskIds(queryByMonth());	
			mActivity.mCalendarCanvas.invalidate();
		}
		
	}
	
	protected float getCalendarItemHeight(){
		float height;
		if(mActivity.mState != CalendarActivity.STATE_MARK_NOTIFICAION){
			height = (mActivity.mDisplayMetrics.heightPixels-
					100*mActivity.mDisplayMetrics.density)/6;
		}else{
			height = (mActivity.mDisplayMetrics.heightPixels
					- CalendarActivity.INDICATOR_ZONE*2 -
					100*mActivity.mDisplayMetrics.density/*- mActivity.mDate.getHeight()
					-mActivity.mWeek.getHeight()*/)/6;
		}
		return height;
	}
}
