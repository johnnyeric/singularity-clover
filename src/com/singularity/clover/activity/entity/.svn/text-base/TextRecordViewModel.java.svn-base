package com.singularity.clover.activity.entity;

import java.util.LinkedList;

import android.graphics.Color;
import android.text.Spannable;
import android.text.SpannableStringBuilder;
import android.text.style.ForegroundColorSpan;
import android.text.style.StyleSpan;
import android.view.View;
import android.widget.TextView;

import com.singularity.clover.R;
import com.singularity.clover.Global;
import com.singularity.clover.activity.entity.TaskViewActivityHelper.ViewHolder;
import com.singularity.clover.entity.EntityPool;
import com.singularity.clover.entity.EntityViewModel;
import com.singularity.clover.entity.Persisable;
import com.singularity.clover.entity.record.Record;
import com.singularity.clover.entity.record.TextRecord;
import com.singularity.clover.util.drag.DragLayer;
import com.singularity.clover.util.drag.MyAbsoluteLayout;
import com.singularity.clover.util.drag.MyAbsoluteLayout.LayoutParams;

/**
 * @author xiaol
 * 文本碎片的视图模型
 */
public class TextRecordViewModel implements EntityViewModel{

	private final TaskViewActivityHelper taskViewActivityHelper;

	TextRecordViewModel(TaskViewActivityHelper taskViewActivityHelper) {
		this.taskViewActivityHelper = taskViewActivityHelper;
	}

	public final static int MODEL_DISPLAY = 1;
	
	@Override
	public View initView() {
		View view = this.taskViewActivityHelper.mLinflater.inflate(
				R.layout.task_view_record_text_item_layout,null);
		return view;
	}

	@Override
	public View changeModel(int model, View layout) {
		switch (model) {
		case MODEL_DISPLAY:
			layout.setOnLongClickListener(
					this.taskViewActivityHelper.onDraggableLongClick);
			break;
		}
		return layout;
	}

	@Override
	public View entityToView(Persisable e, View layout) {
		TextRecord root = (TextRecord) e;
		TextView text = (TextView) layout.findViewById(
				R.id.task_view_record_text_item);
		Spannable content = build(root);
		text.setText(content);
		return layout;
	}

	@Override
	public Persisable viewToEntity(View layout, Persisable e) {
		return e;
	}
	
	public View addToLayout(DragLayer layout,int x,int y,long id){
		TextRecord root = (TextRecord) EntityPool.instance().forId(id, Record.TAG);
		this.taskViewActivityHelper.mActivity.
			getTask().attachment.attach(TextRecord.TAG,root.getId());
		this.taskViewActivityHelper.mActivity.getTask().store();
		
		//root.updatePosition(x, y);
		root.setX(x);root.setY(y);
		root.store();
		View v = initView();
		ViewHolder holder = this.taskViewActivityHelper.new ViewHolder(
				root.getId(),Record.TAG);
		v.setTag(holder);
		entityToView(root, v);
		changeModel(MODEL_DISPLAY, v);
		
		MyAbsoluteLayout.LayoutParams lp = new MyAbsoluteLayout.LayoutParams(
				LayoutParams.WRAP_CONTENT,LayoutParams.WRAP_CONTENT,x,y);
		layout.addView(v, lp);
		return v;
	}
	
	private Spannable build(TextRecord root){	
		int green = taskViewActivityHelper.mActivity.
			getResources().getColor(R.color.dark_green_2);
        int red = taskViewActivityHelper.mActivity.
        	getResources().getColor(R.color.dark_red);
        String empty = taskViewActivityHelper.
        	mActivity.getText(R.string.text_empty).toString();
		SpannableStringBuilder builder = new SpannableStringBuilder();
	
		String title;
		if(root.getName() != null){
			if(root.getName().equals("")){
				title = empty;
			}else{
				title = root.getName();
			}
		}else{
			title = empty;}
		
		int base = title.length();
		builder.append(title);
		builder.setSpan(new StyleSpan(android.graphics.Typeface.BOLD), 
				0, base, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		builder.setSpan(new ForegroundColorSpan(red),
				0, base, Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
		LinkedList<TextRecord> stack = new LinkedList<TextRecord>();
		TextRecord it = root;
		do{
			while(it.getRecordChildId() != Global.INVALIDATE_ID){
				stack.addFirst(it);
				it = (TextRecord) EntityPool.instance().forId(
						it.getRecordChildId(),Record.TAG);
				builder.append("\n");
				int start = builder.length();
				for(int i =0;i<stack.size();i++){
					builder.append("\t");}
				if(it.getName() == null){
					builder.append(" - "+empty);
				}else{
					if(it.getName().equals("")){
						builder.append(" - "+empty);
					}else{
					builder.append(" - "+it.getName());}
				}
				int color1 = (stack.size()&0x1) == 0?green:Color.BLUE;
				builder.setSpan(new ForegroundColorSpan(color1), start, 
						builder.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			}
			if(it.getRecordNextId() != Global.INVALIDATE_ID){
				it = (TextRecord) EntityPool.instance().forId(
						it.getRecordNextId(),Record.TAG);
				builder.append("\n");
				int start = builder.length();
				for(int i =0;i<stack.size();i++){
					builder.append("\t");}
				if(it.getName() == null){
					builder.append(" - "+empty);
				}else{
					if(it.getName().equals("")){
						builder.append(" - "+empty);
					}else{
					builder.append(" - "+it.getName());}
				}
				int color1 = (stack.size()&0x1) == 0?green:Color.BLUE;
				builder.setSpan(new ForegroundColorSpan(color1), start, 
						builder.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
			}else{
				do{		
					it = stack.poll();
					if(it == null)
						return builder;
					if(it.getRecordNextId() != Global.INVALIDATE_ID){
						it = (TextRecord) EntityPool.instance().forId(
								it.getRecordNextId(),Record.TAG);
						builder.append("\n");
						int start = builder.length();
						for(int i =0;i<stack.size();i++){
							builder.append("\t");}
						if(it.getName() == null){
							builder.append(" - "+empty);
						}else{
							if(it.getName().equals("")){
								builder.append(" - "+empty);
							}else{
								builder.append(" - "+it.getName());}
						}
						int color1 = (stack.size()&0x1) == 0?green:Color.BLUE;
						builder.setSpan(new ForegroundColorSpan(color1), start, 
								builder.length(), Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
						break;
					}
				}while(it.getRecordNextId() == Global.INVALIDATE_ID);
			}
		}while(!stack.isEmpty());
		return builder;
	}

	@Override
	public void updateView(View v) {}
}